import { KeyedContainers, ReadonlyObjectMapContainer } from "./containers.js";
import { ReadonlyObjectMapLike } from "./types.js";
export declare const empty: KeyedContainers.TypeClass<ReadonlyObjectMapContainer>["empty"];
export declare const entries: KeyedContainers.TypeClass<ReadonlyObjectMapContainer>["entries"];
export declare const forEachWithKey: KeyedContainers.TypeClass<ReadonlyObjectMapContainer>["forEachWithKey"];
export declare const keep: KeyedContainers.TypeClass<ReadonlyObjectMapContainer>["keep"];
export declare const keepType: KeyedContainers.TypeClass<ReadonlyObjectMapContainer>["keepType"];
export declare const keepWithKey: KeyedContainers.TypeClass<ReadonlyObjectMapContainer>["keepWithKey"];
export declare const keys: KeyedContainers.TypeClass<ReadonlyObjectMapLike>["keys"];
export declare const keySet: KeyedContainers.TypeClass<ReadonlyObjectMapLike>["keySet"];
export declare const map: KeyedContainers.TypeClass<ReadonlyObjectMapContainer>["map"];
export declare const mapWithKey: KeyedContainers.TypeClass<ReadonlyObjectMapContainer>["mapWithKey"];
export declare const reduce: KeyedContainers.TypeClass<ReadonlyObjectMapContainer>["reduce"];
export declare const reduceWithKey: KeyedContainers.TypeClass<ReadonlyObjectMapContainer>["reduceWithKey"];
export declare const values: KeyedContainers.TypeClass<ReadonlyObjectMapContainer>["values"];
