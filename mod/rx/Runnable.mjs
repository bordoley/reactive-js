/// <reference types="./Runnable.d.ts" />
import { returns, identity } from '../functions.mjs';
import Runnable$buffer from './__internal__/Runnable/Runnable.buffer.mjs';
import Runnable$catchError from './__internal__/Runnable/Runnable.catchError.mjs';
import Runnable$concat from './__internal__/Runnable/Runnable.concat.mjs';
import Runnable$concatAll from './__internal__/Runnable/Runnable.concatAll.mjs';
import Runnable$create from './__internal__/Runnable/Runnable.create.mjs';
import Runnable$decodeWithCharset from './__internal__/Runnable/Runnable.decodeWithCharset.mjs';
import Runnable$defer from './__internal__/Runnable/Runnable.defer.mjs';
import Runnable$distinctUntilChanged from './__internal__/Runnable/Runnable.distinctUntilChanged.mjs';
import Runnable$empty from './__internal__/Runnable/Runnable.empty.mjs';
import Runnable$everySatisfy from './__internal__/Runnable/Runnable.everySatisfy.mjs';
import Runnable$first from './__internal__/Runnable/Runnable.first.mjs';
import Runnable$forEach from './__internal__/Runnable/Runnable.forEach.mjs';
import Runnable$fromArray from './__internal__/Runnable/Runnable.fromArray.mjs';
import Runnable$generate from './__internal__/Runnable/Runnable.generate.mjs';
import Runnable$keep from './__internal__/Runnable/Runnable.keep.mjs';
import Runnable$last from './__internal__/Runnable/Runnable.last.mjs';
import Runnable$map from './__internal__/Runnable/Runnable.map.mjs';
import Runnable$never from './__internal__/Runnable/Runnable.never.mjs';
import Runnable$onRun from './__internal__/Runnable/Runnable.onRun.mjs';
import Runnable$pairwise from './__internal__/Runnable/Runnable.pairwise.mjs';
import Runnable$reduce from './__internal__/Runnable/Runnable.reduce.mjs';
import Runnable$repeat from './__internal__/Runnable/Runnable.repeat.mjs';
import Runnable$run from './__internal__/Runnable/Runnable.run.mjs';
import Runnable$scan from './__internal__/Runnable/Runnable.scan.mjs';
import Runnable$skipFirst from './__internal__/Runnable/Runnable.skipFirst.mjs';
import Runnable$someSatisfy from './__internal__/Runnable/Runnable.someSatisfy.mjs';
import Runnable$takeFirst from './__internal__/Runnable/Runnable.takeFirst.mjs';
import Runnable$takeLast from './__internal__/Runnable/Runnable.takeLast.mjs';
import Runnable$takeWhile from './__internal__/Runnable/Runnable.takeWhile.mjs';
import Runnable$throwIfEmpty from './__internal__/Runnable/Runnable.throwIfEmpty.mjs';
import Runnable$toReadonlyArray from './__internal__/Runnable/Runnable.toReadonlyArray.mjs';

const create = Runnable$create;
const buffer = Runnable$buffer;
const catchError = Runnable$catchError;
const concat = Runnable$concat;
const concatAll = Runnable$concatAll;
const decodeWithCharset = Runnable$decodeWithCharset;
const defer = Runnable$defer;
const distinctUntilChanged = Runnable$distinctUntilChanged;
const empty = Runnable$empty;
const everySatisfy = Runnable$everySatisfy;
const first = Runnable$first;
const forEach = Runnable$forEach;
const fromArray = Runnable$fromArray;
const generate = Runnable$generate;
const keep = Runnable$keep;
const last = Runnable$last;
const map = Runnable$map;
const never = Runnable$never;
const onRun = Runnable$onRun;
const pairwise = Runnable$pairwise;
const reduce = Runnable$reduce;
const repeat = Runnable$repeat;
const run = Runnable$run;
const scan = Runnable$scan;
const skipFirst = Runnable$skipFirst;
const someSatisfy = Runnable$someSatisfy;
const takeFirst = Runnable$takeFirst;
const takeLast = Runnable$takeLast;
const takeWhile = Runnable$takeWhile;
const throwIfEmpty = Runnable$throwIfEmpty;
const toReadonlyArray = Runnable$toReadonlyArray;
const toRunnable = returns(identity);

export { buffer, catchError, concat, concatAll, create, decodeWithCharset, defer, distinctUntilChanged, empty, everySatisfy, first, forEach, fromArray, generate, keep, last, map, never, onRun, pairwise, reduce, repeat, run, scan, skipFirst, someSatisfy, takeFirst, takeLast, takeWhile, throwIfEmpty, toReadonlyArray, toRunnable };
