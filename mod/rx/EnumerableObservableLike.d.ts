import { Concat, DecodeWithCharset, DistinctUntilChanged, ForEach, Keep, Map, Pairwise, Reduce, Scan, SkipFirst, TakeFirst, TakeLast, TakeWhile, ThrowIfEmpty, ToReadonlyArray } from "../containers.mjs";
import { Factory } from "../functions.mjs";
import { ToEnumerable } from "../ix.mjs";
import { EnumerableObservableLike } from "../rx.mjs";
import { VirtualTimeSchedulerLike } from "../scheduling.mjs";
import { ToFlowable } from "../streaming.mjs";
declare const concatT: Concat<EnumerableObservableLike>;
declare const decodeWithCharsetT: DecodeWithCharset<EnumerableObservableLike>;
declare const distinctUntilChangedT: DistinctUntilChanged<EnumerableObservableLike>;
declare const forEachT: ForEach<EnumerableObservableLike>;
declare const keepT: Keep<EnumerableObservableLike>;
declare const mapT: Map<EnumerableObservableLike>;
declare const mergeT: Concat<EnumerableObservableLike>;
declare const pairwiseT: Pairwise<EnumerableObservableLike>;
declare const reduceT: Reduce<EnumerableObservableLike>;
declare const scanT: Scan<EnumerableObservableLike>;
declare const skipFirstT: SkipFirst<EnumerableObservableLike>;
declare const takeFirstT: TakeFirst<EnumerableObservableLike>;
declare const takeLastT: TakeLast<EnumerableObservableLike>;
declare const takeWhileT: TakeWhile<EnumerableObservableLike>;
declare const throwIfEmptyT: ThrowIfEmpty<EnumerableObservableLike>;
declare const toEnumerable: ToEnumerable<EnumerableObservableLike>["toEnumerable"];
declare const toEnumerableT: ToEnumerable<EnumerableObservableLike>;
declare const toFlowable: ToFlowable<EnumerableObservableLike>["toFlowable"];
declare const toFlowableT: ToFlowable<EnumerableObservableLike>;
declare const toReadonlyArray: ToReadonlyArray<EnumerableObservableLike, {
    readonly schedulerFactory: Factory<VirtualTimeSchedulerLike>;
}>["toReadonlyArray"];
declare const toReadonlyArrayT: ToReadonlyArray<EnumerableObservableLike, {
    readonly schedulerFactory: Factory<VirtualTimeSchedulerLike>;
}>;
export { concatT, decodeWithCharsetT, distinctUntilChangedT, forEachT, keepT, mapT, mergeT, pairwiseT, reduceT, scanT, skipFirstT, takeFirstT, takeLastT, takeWhileT, throwIfEmptyT, toEnumerable, toEnumerableT, toFlowable, toFlowableT, toReadonlyArray, toReadonlyArrayT };
