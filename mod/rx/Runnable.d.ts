import { DisposableOrTeardown } from "../util.js";
import { Buffer, CatchError, Concat, ConcatAll, DecodeWithCharset, Defer, DistinctUntilChanged, Empty, EverySatisfy, ForEach, ReadonlyArrayLike, Generate, Keep, Map, Never, Pairwise, Reduce, Scan, SkipFirst, SomeSatisfy, TakeFirst, TakeLast, TakeWhile, ThrowIfEmpty, ToReadonlyArray, FromArray, Repeat } from "../containers.js";
import { SideEffect1, Function1, Optional, Factory, Predicate } from "../functions.js";
import { SinkLike, RunnableLike, ToRunnable } from "../rx.js";
declare const create: <T>(run: SideEffect1<SinkLike<T>>) => RunnableLike<T>;
declare const buffer: Buffer<RunnableLike>["buffer"];
declare const catchError: CatchError<RunnableLike>["catchError"];
declare const concat: Concat<RunnableLike>["concat"];
declare const concatAll: ConcatAll<RunnableLike>["concatAll"];
declare const decodeWithCharset: DecodeWithCharset<RunnableLike>["decodeWithCharset"];
declare const defer: Defer<RunnableLike>["defer"];
declare const distinctUntilChanged: DistinctUntilChanged<RunnableLike>["distinctUntilChanged"];
declare const empty: Empty<RunnableLike>["empty"];
declare const everySatisfy: EverySatisfy<RunnableLike>["everySatisfy"];
declare const first: <T>() => Function1<RunnableLike<T>, Optional<T>>;
declare const forEach: ForEach<RunnableLike>["forEach"];
declare const fromArray: <T>(options?: undefined) => Function1<ReadonlyArrayLike<T>, RunnableLike<T>>;
declare const generate: Generate<RunnableLike>["generate"];
declare const keep: Keep<RunnableLike>["keep"];
declare const last: <T>() => Function1<RunnableLike<T>, Optional<T>>;
declare const map: Map<RunnableLike>["map"];
declare const never: Never<RunnableLike>["never"];
declare const onRun: <T>(f: Factory<void | DisposableOrTeardown>) => (runnable: RunnableLike<T>) => RunnableLike<T>;
declare const pairwise: Pairwise<RunnableLike>["pairwise"];
declare const reduce: Reduce<RunnableLike>["reduce"];
declare const repeat: (predicate?: number | Predicate<number> | undefined) => (c: RunnableLike<unknown>) => RunnableLike<unknown>;
declare const run: <T>() => (runnable: RunnableLike<T>) => void;
declare const scan: Scan<RunnableLike>["scan"];
declare const skipFirst: SkipFirst<RunnableLike>["skipFirst"];
declare const someSatisfy: SomeSatisfy<RunnableLike>["someSatisfy"];
declare const takeFirst: TakeFirst<RunnableLike>["takeFirst"];
declare const takeLast: TakeLast<RunnableLike>["takeLast"];
declare const takeWhile: TakeWhile<RunnableLike>["takeWhile"];
declare const throwIfEmpty: ThrowIfEmpty<RunnableLike>["throwIfEmpty"];
declare const toReadonlyArray: ToReadonlyArray<RunnableLike>["toReadonlyArray"];
declare const toRunnable: ToRunnable<RunnableLike>["toRunnable"];
declare const Runnable: Buffer<RunnableLike> & CatchError<RunnableLike> & Concat<RunnableLike> & ConcatAll<RunnableLike> & DecodeWithCharset<RunnableLike> & Defer<RunnableLike> & DistinctUntilChanged<RunnableLike> & Empty<RunnableLike, {
    delay: number;
}> & EverySatisfy<RunnableLike> & ForEach<RunnableLike> & FromArray<RunnableLike> & Generate<RunnableLike> & Keep<RunnableLike> & Map<RunnableLike> & Pairwise<RunnableLike> & Reduce<RunnableLike> & Repeat<RunnableLike> & Scan<RunnableLike> & SkipFirst<RunnableLike> & SomeSatisfy<RunnableLike> & TakeFirst<RunnableLike> & TakeLast<RunnableLike> & TakeWhile<RunnableLike> & ThrowIfEmpty<RunnableLike> & ToReadonlyArray<RunnableLike> & ToRunnable<RunnableLike>;
export { buffer, catchError, concat, concatAll, create, decodeWithCharset, Runnable as default, defer, distinctUntilChanged, empty, everySatisfy, first, forEach, fromArray, generate, keep, last, map, never, onRun, pairwise, reduce, repeat, run, scan, skipFirst, someSatisfy, takeFirst, takeLast, takeWhile, throwIfEmpty, toReadonlyArray, toRunnable };
