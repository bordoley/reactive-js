import { Buffer, CatchError, Compute, Concat, ConcatAll, ConcatMap, ConcatWith, ConcatYieldMap, Contains, DecodeWithCharset, Defer, DistinctUntilChanged, Empty, EncodeUtf8, EndWith, EverySatisfy, ForEach, FromIterable, FromReadonlyArray, Generate, IgnoreElements, Keep, KeepType, Map, MapTo, Never, Pairwise, Reduce, Scan, SkipFirst, SomeSatisfy, StartWith, TakeFirst, TakeLast, TakeWhile, ThrowIfEmpty, Throws, ToReadonlyArray } from "../containers.js";
import { FromEnumerable } from "../ix.js";
import { FromEnumerableObservable, FromRunnableObservable, RunnableLike, ToRunnable } from "../rx.js";
export declare const buffer: Buffer<RunnableLike>["buffer"];
export declare const catchError: CatchError<RunnableLike>["catchError"];
export declare const compute: Compute<RunnableLike>["compute"];
export declare const concat: Concat<RunnableLike>["concat"];
export declare const concatAll: ConcatAll<RunnableLike>["concatAll"];
export declare const concatMap: ConcatMap<RunnableLike>["concatMap"];
export declare const concatWith: ConcatWith<RunnableLike>["concatWith"];
export declare const concatYieldMap: ConcatYieldMap<RunnableLike>["concatYieldMap"];
export declare const contains: Contains<RunnableLike>["contains"];
export declare const create: <T>(run: import("../functions.js").SideEffect1<import("../rx.js").SinkLike<T>>) => RunnableLike<T>;
export declare const decodeWithCharset: DecodeWithCharset<RunnableLike>["decodeWithCharset"];
export declare const defer: Defer<RunnableLike>["defer"];
export declare const distinctUntilChanged: DistinctUntilChanged<RunnableLike>["distinctUntilChanged"];
export declare const empty: Empty<RunnableLike>["empty"];
export declare const encodeUtf8: EncodeUtf8<RunnableLike>["encodeUtf8"];
export declare const endWith: EndWith<RunnableLike>["endWith"];
export declare const everySatisfy: EverySatisfy<RunnableLike>["everySatisfy"];
export declare const first: <T>() => import("../functions.js").Function1<RunnableLike<T>, import("../functions.js").Optional<T>>;
export declare const forEach: ForEach<RunnableLike>["forEach"];
export declare const fromEnumerable: FromEnumerable<RunnableLike>["fromEnumerable"];
export declare const fromEnumerableObservable: FromEnumerableObservable<RunnableLike>["fromEnumerableObservable"];
export declare const fromIterable: FromIterable<RunnableLike>["fromIterable"];
export declare const fromReadonlyArray: FromReadonlyArray<RunnableLike>["fromReadonlyArray"];
export declare const fromRunnableObservable: FromRunnableObservable<RunnableLike>["fromRunnableObservable"];
export declare const generate: Generate<RunnableLike>["generate"];
export declare const ignoreElements: IgnoreElements<RunnableLike>["ignoreElements"];
export declare const keep: Keep<RunnableLike>["keep"];
export declare const keepType: KeepType<RunnableLike>["keepType"];
export declare const last: <T>() => import("../functions.js").Function1<RunnableLike<T>, import("../functions.js").Optional<T>>;
export declare const map: Map<RunnableLike>["map"];
export declare const mapTo: MapTo<RunnableLike>["mapTo"];
export declare const never: Never<RunnableLike>["never"];
export declare const onRun: <T>(f: import("../functions.js").Factory<void | import("../util.js").DisposableOrTeardown>) => (runnable: RunnableLike<T>) => RunnableLike<T>;
export declare const pairwise: Pairwise<RunnableLike>["pairwise"];
export declare const reduce: Reduce<RunnableLike>["reduce"];
export declare const repeat: (predicate?: number | import("../functions.js").Predicate<number> | undefined) => (c: RunnableLike<unknown>) => RunnableLike<unknown>;
export declare const run: <T>() => (runnable: RunnableLike<T>) => void;
export declare const scan: Scan<RunnableLike>["scan"];
export declare const skipFirst: SkipFirst<RunnableLike>["skipFirst"];
export declare const someSatisfy: SomeSatisfy<RunnableLike>["someSatisfy"];
export declare const startWith: StartWith<RunnableLike>["startWith"];
export declare const takeFirst: TakeFirst<RunnableLike>["takeFirst"];
export declare const takeLast: TakeLast<RunnableLike>["takeLast"];
export declare const takeWhile: TakeWhile<RunnableLike>["takeWhile"];
export declare const throwIfEmpty: ThrowIfEmpty<RunnableLike>["throwIfEmpty"];
export declare const throws: Throws<RunnableLike, {
    delay?: number;
    delayStart?: boolean;
}>["throws"];
export declare const toReadonlyArray: ToReadonlyArray<RunnableLike>["toReadonlyArray"];
export declare const toRunnable: ToRunnable<RunnableLike>["toRunnable"];
