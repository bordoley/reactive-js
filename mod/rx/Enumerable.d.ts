import { Buffer, Concat, ConcatAll, ConcatMap, ConcatWith, ContainerLike, ContainerLike_T, ContainerLike_type, Contains, DistinctUntilChanged, Empty, EndWith, Enumerate, EnumeratorLike, EverySatisfy, First, FlatMapIterable, ForEach, ForkConcat, ForkZip, FromEnumeratorFactory, FromFactory, FromIterable, FromOptional, FromReadonlyArray, Generate, Identity, IgnoreElements, Keep, KeepType, Last, Map, MapTo, NoneSatisfy, Pairwise, Pick, Reduce, Repeat, Scan, SkipFirst, SomeSatisfy, StartWith, TakeFirst, TakeLast, TakeWhile, ToReadonlyArray, Zip, ZipWith } from "../containers.js";
import { BackpressureStrategy, CatchError, DecodeWithCharset, Defer, DispatchTo, EncodeUtf8, Enqueue, EnumerableContainerLike, FirstAsync, Flow, LastAsync, Retry, ScanLast, ThrowIfEmpty, Throws } from "../rx.js";
import { DisposableLike } from "../util.js";
export declare const backpressureStrategy: BackpressureStrategy<EnumerableContainerLike>["backpressureStrategy"];
export declare const buffer: Buffer<EnumerableContainerLike>["buffer"];
export declare const catchError: CatchError<EnumerableContainerLike>["catchError"];
/**
 * @category Constructor
 */
export declare const compute: <T>(computation: import("../functions.js").Factory<T>, options?: {
    mode?: "batched" | "combine-latest" | undefined;
}) => import("../rx.js").EnumerableLike<T>;
export declare const concat: Concat<EnumerableContainerLike>["concat"];
export declare const concatAll: ConcatAll<EnumerableContainerLike>["concatAll"];
export declare const concatMap: ConcatMap<EnumerableContainerLike>["concatMap"];
export declare const concatWith: ConcatWith<EnumerableContainerLike>["concatWith"];
export declare const contains: Contains<EnumerableContainerLike>["contains"];
export declare const decodeWithCharset: DecodeWithCharset<EnumerableContainerLike>["decodeWithCharset"];
export declare const defer: Defer<EnumerableContainerLike>["defer"];
export declare const dispatchTo: DispatchTo<EnumerableContainerLike>["dispatchTo"];
export declare const distinctUntilChanged: DistinctUntilChanged<EnumerableContainerLike>["distinctUntilChanged"];
export declare const empty: Empty<EnumerableContainerLike>["empty"];
export declare const encodeUtf8: EncodeUtf8<EnumerableContainerLike>["encodeUtf8"];
export declare const enqueue: Enqueue<EnumerableContainerLike>["enqueue"];
export declare const endWith: EndWith<EnumerableContainerLike>["endWith"];
interface EnumerableEnumerator<T = unknown> extends EnumeratorLike<T>, DisposableLike, ContainerLike {
    readonly [ContainerLike_type]?: EnumeratorLike<this[typeof ContainerLike_T]> & DisposableLike;
}
export declare const enumerate: Enumerate<EnumerableContainerLike, EnumerableEnumerator>["enumerate"];
export declare const everySatisfy: EverySatisfy<EnumerableContainerLike>["everySatisfy"];
export declare const first: First<EnumerableContainerLike>["first"];
export declare const firstAsync: FirstAsync<EnumerableContainerLike>["firstAsync"];
export declare const flatMapIterable: FlatMapIterable<EnumerableContainerLike>["flatMapIterable"];
export declare const flow: Flow<EnumerableContainerLike>["flow"];
export declare const forEach: ForEach<EnumerableContainerLike>["forEach"];
export declare const forkConcat: ForkConcat<EnumerableContainerLike>["forkConcat"];
export declare const forkZip: ForkZip<EnumerableContainerLike>["forkZip"];
export declare const fromEnumeratorFactory: FromEnumeratorFactory<EnumerableContainerLike>["fromEnumeratorFactory"];
export declare const fromFactory: FromFactory<EnumerableContainerLike>["fromFactory"];
export declare const fromIterable: FromIterable<EnumerableContainerLike>["fromIterable"];
export declare const fromOptional: FromOptional<EnumerableContainerLike>["fromOptional"];
export declare const fromReadonlyArray: FromReadonlyArray<EnumerableContainerLike>["fromReadonlyArray"];
export declare const generate: Generate<EnumerableContainerLike>["generate"];
export declare const identity: Identity<EnumerableContainerLike>["identity"];
export declare const ignoreElements: IgnoreElements<EnumerableContainerLike>["ignoreElements"];
export declare const keep: Keep<EnumerableContainerLike>["keep"];
export declare const keepType: KeepType<EnumerableContainerLike>["keepType"];
export declare const last: Last<EnumerableContainerLike>["last"];
export declare const lastAsync: LastAsync<EnumerableContainerLike>["lastAsync"];
export declare const map: Map<EnumerableContainerLike>["map"];
export declare const mapTo: MapTo<EnumerableContainerLike>["mapTo"];
export declare const noneSatisfy: NoneSatisfy<EnumerableContainerLike>["noneSatisfy"];
export declare const pairwise: Pairwise<EnumerableContainerLike>["pairwise"];
export declare const pick: Pick<EnumerableContainerLike>["pick"];
export declare const reduce: Reduce<EnumerableContainerLike>["reduce"];
export declare const repeat: Repeat<EnumerableContainerLike>["repeat"];
export declare const retry: Retry<EnumerableContainerLike>["retry"];
export declare const scan: Scan<EnumerableContainerLike>["scan"];
export declare const scanLast: ScanLast<EnumerableContainerLike>["scanLast"];
export declare const skipFirst: SkipFirst<EnumerableContainerLike>["skipFirst"];
export declare const someSatisfy: SomeSatisfy<EnumerableContainerLike>["someSatisfy"];
export declare const startWith: StartWith<EnumerableContainerLike>["startWith"];
export declare const takeFirst: TakeFirst<EnumerableContainerLike>["takeFirst"];
export declare const takeLast: TakeLast<EnumerableContainerLike>["takeLast"];
export declare const takeWhile: TakeWhile<EnumerableContainerLike>["takeWhile"];
export declare const throws: Throws<EnumerableContainerLike>["throws"];
export declare const throwIfEmpty: ThrowIfEmpty<EnumerableContainerLike>["throwIfEmpty"];
export declare const toReadonlyArray: ToReadonlyArray<EnumerableContainerLike>["toReadonlyArray"];
export declare const zip: Zip<EnumerableContainerLike>["zip"];
export declare const zipWith: ZipWith<EnumerableContainerLike>["zipWith"];
export {};
