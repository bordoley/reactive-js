import { Buffer, Concat, ConcatAll, ConcatMap, ConcatWith, Container, Container_T, Container_type, Contains, DistinctUntilChanged, Empty, EndWith, Enumerate, EnumeratorLike, EverySatisfy, First, FlatMapIterable, ForEach, ForkConcat, ForkZip, FromEnumeratorFactory, FromFactory, FromIterable, FromOptional, FromReadonlyArray, Generate, Identity, IgnoreElements, Keep, KeepType, Last, Map, MapTo, NoneSatisfy, Pairwise, Pick, Reduce, Repeat, Scan, SkipFirst, SomeSatisfy, StartWith, TakeFirst, TakeLast, TakeWhile, ToReadonlyArray, Zip, ZipWith } from "../containers.js";
import { BackpressureStrategy, CatchError, DecodeWithCharset, Defer, DispatchTo, EncodeUtf8, Enqueue, EnumerableContainer, FirstAsync, Flow, LastAsync, Retry, ScanLast, ThrowIfEmpty, Throws } from "../rx.js";
import { DisposableLike } from "../util.js";
export declare const backpressureStrategy: BackpressureStrategy<EnumerableContainer>["backpressureStrategy"];
export declare const buffer: Buffer<EnumerableContainer>["buffer"];
export declare const catchError: CatchError<EnumerableContainer>["catchError"];
/**
 * @category Constructor
 */
export declare const compute: <T>(computation: import("../functions.js").Factory<T>, options?: {
    mode?: "batched" | "combine-latest" | undefined;
}) => import("../rx.js").EnumerableLike<T>;
export declare const concat: Concat<EnumerableContainer>["concat"];
export declare const concatAll: ConcatAll<EnumerableContainer>["concatAll"];
export declare const concatMap: ConcatMap<EnumerableContainer>["concatMap"];
export declare const concatWith: ConcatWith<EnumerableContainer>["concatWith"];
export declare const contains: Contains<EnumerableContainer>["contains"];
export declare const decodeWithCharset: DecodeWithCharset<EnumerableContainer>["decodeWithCharset"];
export declare const defer: Defer<EnumerableContainer>["defer"];
export declare const dispatchTo: DispatchTo<EnumerableContainer>["dispatchTo"];
export declare const distinctUntilChanged: DistinctUntilChanged<EnumerableContainer>["distinctUntilChanged"];
export declare const empty: Empty<EnumerableContainer>["empty"];
export declare const encodeUtf8: EncodeUtf8<EnumerableContainer>["encodeUtf8"];
export declare const enqueue: Enqueue<EnumerableContainer>["enqueue"];
export declare const endWith: EndWith<EnumerableContainer>["endWith"];
interface EnumerableEnumeratorContainer extends Container {
    readonly [Container_type]?: EnumeratorLike<this[typeof Container_T]> & DisposableLike;
}
export declare const enumerate: Enumerate<EnumerableContainer, EnumerableEnumeratorContainer>["enumerate"];
export declare const everySatisfy: EverySatisfy<EnumerableContainer>["everySatisfy"];
export declare const first: First<EnumerableContainer>["first"];
export declare const firstAsync: FirstAsync<EnumerableContainer>["firstAsync"];
export declare const flatMapIterable: FlatMapIterable<EnumerableContainer>["flatMapIterable"];
export declare const flow: Flow<EnumerableContainer>["flow"];
export declare const forEach: ForEach<EnumerableContainer>["forEach"];
export declare const forkConcat: ForkConcat<EnumerableContainer>["forkConcat"];
export declare const forkZip: ForkZip<EnumerableContainer>["forkZip"];
export declare const fromEnumeratorFactory: FromEnumeratorFactory<EnumerableContainer>["fromEnumeratorFactory"];
export declare const fromFactory: FromFactory<EnumerableContainer>["fromFactory"];
export declare const fromIterable: FromIterable<EnumerableContainer>["fromIterable"];
export declare const fromOptional: FromOptional<EnumerableContainer>["fromOptional"];
export declare const fromReadonlyArray: FromReadonlyArray<EnumerableContainer>["fromReadonlyArray"];
export declare const generate: Generate<EnumerableContainer>["generate"];
export declare const identity: Identity<EnumerableContainer>["identity"];
export declare const ignoreElements: IgnoreElements<EnumerableContainer>["ignoreElements"];
export declare const keep: Keep<EnumerableContainer>["keep"];
export declare const keepType: KeepType<EnumerableContainer>["keepType"];
export declare const last: Last<EnumerableContainer>["last"];
export declare const lastAsync: LastAsync<EnumerableContainer>["lastAsync"];
export declare const map: Map<EnumerableContainer>["map"];
export declare const mapTo: MapTo<EnumerableContainer>["mapTo"];
export declare const noneSatisfy: NoneSatisfy<EnumerableContainer>["noneSatisfy"];
export declare const pairwise: Pairwise<EnumerableContainer>["pairwise"];
export declare const pick: Pick<EnumerableContainer>["pick"];
export declare const reduce: Reduce<EnumerableContainer>["reduce"];
export declare const repeat: Repeat<EnumerableContainer>["repeat"];
export declare const retry: Retry<EnumerableContainer>["retry"];
export declare const scan: Scan<EnumerableContainer>["scan"];
export declare const scanLast: ScanLast<EnumerableContainer>["scanLast"];
export declare const skipFirst: SkipFirst<EnumerableContainer>["skipFirst"];
export declare const someSatisfy: SomeSatisfy<EnumerableContainer>["someSatisfy"];
export declare const startWith: StartWith<EnumerableContainer>["startWith"];
export declare const takeFirst: TakeFirst<EnumerableContainer>["takeFirst"];
export declare const takeLast: TakeLast<EnumerableContainer>["takeLast"];
export declare const takeWhile: TakeWhile<EnumerableContainer>["takeWhile"];
export declare const throws: Throws<EnumerableContainer>["throws"];
export declare const throwIfEmpty: ThrowIfEmpty<EnumerableContainer>["throwIfEmpty"];
export declare const toReadonlyArray: ToReadonlyArray<EnumerableContainer>["toReadonlyArray"];
export declare const zip: Zip<EnumerableContainer>["zip"];
export declare const zipWith: ZipWith<EnumerableContainer>["zipWith"];
export {};
