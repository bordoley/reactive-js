/// <reference types="./Runnable.test.d.ts" />

import { bufferTests, catchErrorTests, concatAllTests, concatTests, decodeWithCharsetTests, distinctUntilChangedTests, everySatisfyTests, forEachTests, fromReadonlyArrayTests, keepTests, mapTests, pairwiseTests, reduceTests, repeatTests, scanTests, skipFirstTests, someSatisfyTests, takeFirstTests, takeLastTests, takeWhileTests, throwIfEmptyTests, } from "../../__tests__/operators.js";
import { describe, expectEquals, test, testModule, } from "../../__tests__/testing.js";
import { none, pipeLazy } from "../../functions.js";
import Runnable from "../Runnable.js";
testModule("Runnable", bufferTests(Runnable), catchErrorTests(Runnable), concatTests(Runnable), concatAllTests(Runnable), decodeWithCharsetTests(Runnable), distinctUntilChangedTests(Runnable), everySatisfyTests(Runnable), forEachTests(Runnable), fromReadonlyArrayTests(Runnable), keepTests(Runnable), mapTests(Runnable), pairwiseTests(Runnable), reduceTests(Runnable), repeatTests(Runnable), scanTests(Runnable), skipFirstTests(Runnable), someSatisfyTests(Runnable), takeFirstTests(Runnable), takeLastTests(Runnable), takeWhileTests(Runnable), throwIfEmptyTests(Runnable), describe("first", test("when the source has values", pipeLazy([0, 1, 2], Runnable.fromReadonlyArray(), Runnable.first(), expectEquals(0))), test("when the source is empty", pipeLazy([], Runnable.fromReadonlyArray(), Runnable.first(), expectEquals(none)))), describe("last", test("when the source has values", pipeLazy([0, 1, 2], Runnable.fromReadonlyArray(), Runnable.last(), expectEquals(2))), test("when the source is empty", pipeLazy([], Runnable.fromReadonlyArray(), Runnable.last(), expectEquals(none)))));
