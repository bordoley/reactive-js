import { Function1 } from "../functions.js";
import { SequenceLike, ConcatAll, DistinctUntilChanged, ReadonlyArrayLike, Generate, Keep, Map, Pairwise, Repeat, Scan, ContainerOperator, SkipFirst, TakeFirst, TakeLast, TakeWhile, ToReadonlyArray, Zip } from "../containers.js";
import { ToEnumerable } from "../ix.js";
import { ToRunnable } from "../rx.js";
declare const concat: <T>(fst: SequenceLike<T>, snd: SequenceLike<T>, ...tail: readonly SequenceLike<T>[]) => SequenceLike<T>;
declare const concatAll: ConcatAll<SequenceLike>["concatAll"];
declare const distinctUntilChanged: DistinctUntilChanged<SequenceLike>["distinctUntilChanged"];
declare const fromArray: <T>(options?: undefined) => Function1<ReadonlyArrayLike<T>, SequenceLike<T>>;
declare const generate: Generate<SequenceLike>["generate"];
declare const keep: Keep<SequenceLike>["keep"];
declare const map: Map<SequenceLike>["map"];
declare const pairwise: Pairwise<SequenceLike>["pairwise"];
declare const repeat: Repeat<SequenceLike>["repeat"];
declare const scan: Scan<SequenceLike>["scan"];
declare const seek: <T>(count: number) => ContainerOperator<SequenceLike<unknown>, T, T>;
declare const skipFirst: SkipFirst<SequenceLike>["skipFirst"];
declare const takeFirst: TakeFirst<SequenceLike>["takeFirst"];
declare const takeLast: TakeLast<SequenceLike>["takeLast"];
declare const takeWhile: TakeWhile<SequenceLike>["takeWhile"];
declare const toEnumerable: ToEnumerable<SequenceLike>["toEnumerable"];
declare const toReadonlyArray: ToReadonlyArray<SequenceLike>["toReadonlyArray"];
declare const toRunnable: ToRunnable<SequenceLike>["toRunnable"];
declare const zip: Zip<SequenceLike>["zip"];
export { concat, concatAll, distinctUntilChanged, fromArray, generate, keep, map, pairwise, repeat, scan, seek, skipFirst, takeFirst, takeLast, takeWhile, toEnumerable, toReadonlyArray, toRunnable, zip };
