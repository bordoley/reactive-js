import { Empty, ReadonlyArrayLike, Keep, Map, ToReadonlyArray } from "../containers.mjs";
import { Predicate, Function1, SideEffect1 } from "../functions.mjs";
declare const empty: <T>() => readonly T[];
declare const emptyT: Empty<ReadonlyArrayLike>;
declare const every: <T>(predicate: Predicate<T>) => Function1<readonly T[], boolean>;
declare const keep: Keep<ReadonlyArrayLike>["keep"];
declare const keepT: Keep<ReadonlyArrayLike>;
declare const map: Map<ReadonlyArrayLike>["map"];
declare const mapT: Map<ReadonlyArrayLike>;
declare const forEach: <T>(f: SideEffect1<T>) => Function1<readonly T[], readonly T[]>;
declare const toReadonlyArray: ToReadonlyArray<ReadonlyArrayLike>["toReadonlyArray"];
declare const toReadonlyArrayT: ToReadonlyArray<ReadonlyArrayLike>;
export { empty, emptyT, every, forEach, keep, keepT, map, mapT, toReadonlyArray, toReadonlyArrayT };
