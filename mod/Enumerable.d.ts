import { EnumerableContainer } from "./containers.js";
export declare const buffer: EnumerableContainer.TypeClass["buffer"];
export declare const catchError: EnumerableContainer.TypeClass["catchError"];
/**
 * @category Constructor
 */
export declare const compute: <T>(computation: import("./functions.js").Factory<T>, options?: {
    mode?: "batched" | "combine-latest" | undefined;
}) => import("./types.js").EnumerableLike<T>;
export declare const concat: EnumerableContainer.TypeClass["concat"];
export declare const concatAll: EnumerableContainer.TypeClass["concatAll"];
export declare const concatMap: EnumerableContainer.TypeClass["concatMap"];
export declare const concatWith: EnumerableContainer.TypeClass["concatWith"];
export declare const contains: EnumerableContainer.TypeClass["contains"];
export declare const decodeWithCharset: EnumerableContainer.TypeClass["decodeWithCharset"];
export declare const defer: EnumerableContainer.TypeClass["defer"];
export declare const distinctUntilChanged: EnumerableContainer.TypeClass["distinctUntilChanged"];
export declare const empty: EnumerableContainer.TypeClass["empty"];
export declare const encodeUtf8: EnumerableContainer.TypeClass["encodeUtf8"];
export declare const endWith: EnumerableContainer.TypeClass["endWith"];
export declare const enumerate: EnumerableContainer.TypeClass["enumerate"];
export declare const everySatisfy: EnumerableContainer.TypeClass["everySatisfy"];
export declare const first: EnumerableContainer.TypeClass["first"];
export declare const firstAsync: EnumerableContainer.TypeClass["firstAsync"];
export declare const flatMapIterable: EnumerableContainer.TypeClass["flatMapIterable"];
export declare const flow: EnumerableContainer.TypeClass["flow"];
export declare const forEach: EnumerableContainer.TypeClass["forEach"];
export declare const forkConcat: EnumerableContainer.TypeClass["forkConcat"];
export declare const forkZip: EnumerableContainer.TypeClass["forkZip"];
export declare const fromEnumeratorFactory: EnumerableContainer.TypeClass["fromEnumeratorFactory"];
export declare const fromFactory: EnumerableContainer.TypeClass["fromFactory"];
export declare const fromIterable: EnumerableContainer.TypeClass["fromIterable"];
export declare const fromOptional: EnumerableContainer.TypeClass["fromOptional"];
export declare const fromReadonlyArray: EnumerableContainer.TypeClass["fromReadonlyArray"];
export declare const generate: EnumerableContainer.TypeClass["generate"];
export declare const identity: EnumerableContainer.TypeClass["identity"];
export declare const ignoreElements: EnumerableContainer.TypeClass["ignoreElements"];
export declare const keep: EnumerableContainer.TypeClass["keep"];
export declare const keepType: EnumerableContainer.TypeClass["keepType"];
export declare const last: EnumerableContainer.TypeClass["last"];
export declare const lastAsync: EnumerableContainer.TypeClass["lastAsync"];
export declare const map: EnumerableContainer.TypeClass["map"];
export declare const mapTo: EnumerableContainer.TypeClass["mapTo"];
export declare const noneSatisfy: EnumerableContainer.TypeClass["noneSatisfy"];
export declare const pairwise: EnumerableContainer.TypeClass["pairwise"];
export declare const pick: EnumerableContainer.TypeClass["pick"];
export declare const reduce: EnumerableContainer.TypeClass["reduce"];
export declare const repeat: EnumerableContainer.TypeClass["repeat"];
export declare const retry: EnumerableContainer.TypeClass["retry"];
export declare const scan: EnumerableContainer.TypeClass["scan"];
export declare const scanLast: EnumerableContainer.TypeClass["scanLast"];
export declare const skipFirst: EnumerableContainer.TypeClass["skipFirst"];
export declare const someSatisfy: EnumerableContainer.TypeClass["someSatisfy"];
export declare const startWith: EnumerableContainer.TypeClass["startWith"];
export declare const takeFirst: EnumerableContainer.TypeClass["takeFirst"];
export declare const takeLast: EnumerableContainer.TypeClass["takeLast"];
export declare const takeWhile: EnumerableContainer.TypeClass["takeWhile"];
export declare const throws: EnumerableContainer.TypeClass["throws"];
export declare const throwIfEmpty: EnumerableContainer.TypeClass["throwIfEmpty"];
export declare const toReadonlyArray: EnumerableContainer.TypeClass["toReadonlyArray"];
export declare const zip: EnumerableContainer.TypeClass["zip"];
export declare const zipWith: EnumerableContainer.TypeClass["zipWith"];
