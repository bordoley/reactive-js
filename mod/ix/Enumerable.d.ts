import { Buffer, Compute, Concat, ConcatAll, ConcatMap, ConcatWith, ConcatYieldMap, DistinctUntilChanged, Empty, EndWith, ForEach, FromIterable, FromReadonlyArray, Generate, IgnoreElements, Keep, KeepType, Map, MapTo, Pairwise, Repeat, Scan, SkipFirst, StartWith, TakeFirst, TakeLast, TakeWhile, ThrowIfEmpty, Throws, ToIterable, ToReadonlyArray, Zip, ZipWith } from "../containers.js";
import { EnumerableLike, ToAsyncEnumerable, ToEnumerable } from "../ix.js";
import { ToEnumerableObservable, ToObservable, ToRunnable, ToRunnableObservable } from "../rx.js";
import { ToFlowable } from "../streaming.js";
export declare const enumerate: <T>() => (enumerable: EnumerableLike<T>) => import("../ix.js").EnumeratorLike<T>;
export declare const buffer: Buffer<EnumerableLike>["buffer"];
export declare const compute: Compute<EnumerableLike>["compute"];
export declare const concat: Concat<EnumerableLike>["concat"];
export declare const concatAll: ConcatAll<EnumerableLike>["concatAll"];
export declare const concatMap: ConcatMap<EnumerableLike>["concatMap"];
export declare const concatWith: ConcatWith<EnumerableLike>["concatWith"];
export declare const concatYieldMap: ConcatYieldMap<EnumerableLike>["concatYieldMap"];
export declare const distinctUntilChanged: DistinctUntilChanged<EnumerableLike>["distinctUntilChanged"];
export declare const empty: Empty<EnumerableLike>["empty"];
export declare const endWith: EndWith<EnumerableLike>["endWith"];
export declare const forEach: ForEach<EnumerableLike>["forEach"];
export declare const fromReadonlyArray: FromReadonlyArray<EnumerableLike>["fromReadonlyArray"];
export declare const fromIterable: FromIterable<EnumerableLike>["fromIterable"];
export declare const generate: Generate<EnumerableLike>["generate"];
export declare const ignoreElements: IgnoreElements<EnumerableLike>["ignoreElements"];
export declare const keep: Keep<EnumerableLike>["keep"];
export declare const keepType: KeepType<EnumerableLike>["keepType"];
export declare const map: Map<EnumerableLike>["map"];
export declare const mapTo: MapTo<EnumerableLike>["mapTo"];
export declare const pairwise: Pairwise<EnumerableLike>["pairwise"];
export declare const repeat: Repeat<EnumerableLike>["repeat"];
export declare const scan: Scan<EnumerableLike>["scan"];
export declare const skipFirst: SkipFirst<EnumerableLike>["skipFirst"];
export declare const startWith: StartWith<EnumerableLike>["startWith"];
export declare const takeFirst: TakeFirst<EnumerableLike>["takeFirst"];
export declare const takeLast: TakeLast<EnumerableLike>["takeLast"];
export declare const takeWhile: TakeWhile<EnumerableLike>["takeWhile"];
export declare const throwIfEmpty: ThrowIfEmpty<EnumerableLike>["throwIfEmpty"];
export declare const throws: Throws<EnumerableLike>["throws"];
export declare const toAsyncEnumerable: ToAsyncEnumerable<EnumerableLike>["toAsyncEnumerable"];
export declare const toEnumerable: ToEnumerable<EnumerableLike>["toEnumerable"];
export declare const toEnumerableObservable: ToEnumerableObservable<EnumerableLike>["toEnumerableObservable"];
export declare const toFlowable: ToFlowable<EnumerableLike, {
    readonly delay?: number;
    readonly delayStart?: boolean;
}>["toFlowable"];
export declare const toIterable: ToIterable<EnumerableLike>["toIterable"];
export declare const toObservable: ToObservable<EnumerableLike, {
    delay?: number;
    delayStart?: boolean;
}>["toObservable"];
export declare const toReadonlyArray: ToReadonlyArray<EnumerableLike>["toReadonlyArray"];
export declare const toRunnable: ToRunnable<EnumerableLike>["toRunnable"];
export declare const toRunnableObservable: ToRunnableObservable<EnumerableLike, {
    readonly delay?: number;
    readonly delayStart?: boolean;
}>["toRunnableObservable"];
export declare const zip: Zip<EnumerableLike>["zip"];
export declare const zipWith: ZipWith<EnumerableLike>["zipWith"];
