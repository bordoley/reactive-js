/// <reference types="./EnumerableLike.d.ts" />
import IterableLike__toEnumerable from '../containers/__internal__/IterableLike/IterableLike.toEnumerable.mjs';
import { identity } from '../functions.mjs';
import EnumerableLike__buffer from './__internal__/EnumerableLike/EnumerableLike.buffer.mjs';
import EnumerableLike__concat from './__internal__/EnumerableLike/EnumerableLike.concat.mjs';
import EnumerableLike__concatAll from './__internal__/EnumerableLike/EnumerableLike.concatAll.mjs';
import EnumerableLike__distinctUntilChanged from './__internal__/EnumerableLike/EnumerableLike.distinctUntilChanged.mjs';
import EnumerableLike__empty from './__internal__/EnumerableLike/EnumerableLike.empty.mjs';
import EnumerableLike__enumerate from './__internal__/EnumerableLike/EnumerableLike.enumerate.mjs';
import EnumerableLike__forEach from './__internal__/EnumerableLike/EnumerableLike.forEach.mjs';
import EnumerableLike__fromArray from './__internal__/EnumerableLike/EnumerableLike.fromArray.mjs';
import EnumerableLike__generate from './__internal__/EnumerableLike/EnumerableLike.generate.mjs';
import EnumerableLike__keep from './__internal__/EnumerableLike/EnumerableLike.keep.mjs';
import EnumerableLike__map from './__internal__/EnumerableLike/EnumerableLike.map.mjs';
import EnumerableLike__pairwise from './__internal__/EnumerableLike/EnumerableLike.pairwise.mjs';
import EnumerableLike__repeat from './__internal__/EnumerableLike/EnumerableLike.repeat.mjs';
import EnumerableLike__scan from './__internal__/EnumerableLike/EnumerableLike.scan.mjs';
import EnumerableLike__skipFirst from './__internal__/EnumerableLike/EnumerableLike.skipFirst.mjs';
import EnumerableLike__takeFirst from './__internal__/EnumerableLike/EnumerableLike.takeFirst.mjs';
import EnumerableLike__takeLast from './__internal__/EnumerableLike/EnumerableLike.takeLast.mjs';
import EnumerableLike__takeWhile from './__internal__/EnumerableLike/EnumerableLike.takeWhile.mjs';
import EnumerableLike__throwIfEmpty from './__internal__/EnumerableLike/EnumerableLike.throwIfEmpty.mjs';
import EnumerableLike__toEnumerableObservable from './__internal__/EnumerableLike/EnumerableLike.toEnumerableObservable.mjs';
import EnumerableLike__toIterable from './__internal__/EnumerableLike/EnumerableLike.toIterable.mjs';
import EnumerableLike__toReadonlyArray from './__internal__/EnumerableLike/EnumerableLike.toReadonlyArray.mjs';
import EnumerableLike__toRunnable from './__internal__/EnumerableLike/EnumerableLike.toRunnable.mjs';
import EnumerableLike__toRunnableObservable from './__internal__/EnumerableLike/EnumerableLike.toRunnableObservable.mjs';
import EnumerableLike__zip from './__internal__/EnumerableLike/EnumerableLike.zip.mjs';

const enumerate = EnumerableLike__enumerate;
const buffer = EnumerableLike__buffer;
const concat = EnumerableLike__concat;
const concatAll = EnumerableLike__concatAll;
const distinctUntilChanged = EnumerableLike__distinctUntilChanged;
const empty = EnumerableLike__empty;
const forEach = EnumerableLike__forEach;
const fromArray = EnumerableLike__fromArray;
const fromIterable = IterableLike__toEnumerable;
const generate = EnumerableLike__generate;
const keep = EnumerableLike__keep;
const map = EnumerableLike__map;
const pairwise = EnumerableLike__pairwise;
const repeat = EnumerableLike__repeat;
const scan = EnumerableLike__scan;
const skipFirst = EnumerableLike__skipFirst;
const takeFirst = EnumerableLike__takeFirst;
const takeLast = EnumerableLike__takeLast;
const takeWhile = EnumerableLike__takeWhile;
const throwIfEmpty = EnumerableLike__throwIfEmpty;
const toEnumerable = () => identity;
const toEnumerableObservable = EnumerableLike__toEnumerableObservable;
const toIterable = EnumerableLike__toIterable;
const toObservable = EnumerableLike__toRunnableObservable;
const toReadonlyArray = EnumerableLike__toReadonlyArray;
const toRunnable = EnumerableLike__toRunnable;
const toRunnableObservable = EnumerableLike__toRunnableObservable;
const zip = EnumerableLike__zip;

export { buffer, concat, concatAll, distinctUntilChanged, empty, enumerate, forEach, fromArray, fromIterable, generate, keep, map, pairwise, repeat, scan, skipFirst, takeFirst, takeLast, takeWhile, throwIfEmpty, toEnumerable, toEnumerableObservable, toIterable, toObservable, toReadonlyArray, toRunnable, toRunnableObservable, zip };
