import { FromArrayOptions, Keep, Map, Scan, TakeWhile, ToReadonlyArray } from "../containers.mjs";
import { Function1 } from "../functions.mjs";
import { AsyncEnumerableLike } from "../ix.mjs";
import { ScanAsync, ObservableLike, ToObservable } from "../rx.mjs";
declare const fromArray: <T>(_?: Partial<FromArrayOptions>) => Function1<readonly T[], AsyncEnumerableLike<T>>;
declare const keep: Keep<AsyncEnumerableLike>["keep"];
declare const keepT: Keep<AsyncEnumerableLike>;
declare const map: Map<AsyncEnumerableLike>["map"];
declare const mapT: Map<AsyncEnumerableLike>;
declare const scan: Scan<AsyncEnumerableLike>["scan"];
declare const scanT: Scan<AsyncEnumerableLike>;
declare const scanAsync: ScanAsync<AsyncEnumerableLike, ObservableLike>["scanAsync"];
declare const scanAsyncT: ScanAsync<AsyncEnumerableLike, ObservableLike>;
declare const takeWhile: TakeWhile<AsyncEnumerableLike>["takeWhile"];
declare const takeWhileT: TakeWhile<AsyncEnumerableLike>;
declare const toObservable: ToObservable<AsyncEnumerableLike>["toObservable"];
declare const toObservableT: ToObservable<AsyncEnumerableLike>;
declare const toReadonlyArray: ToReadonlyArray<AsyncEnumerableLike>["toReadonlyArray"];
declare const toReadonlyArrayT: ToReadonlyArray<AsyncEnumerableLike>;
export { fromArray, keep, keepT, map, mapT, scan, scanAsync, scanAsyncT, scanT, takeWhile, takeWhileT, toObservable, toObservableT, toReadonlyArray, toReadonlyArrayT };
