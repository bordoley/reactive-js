/// <reference types="./EnumerableObservable.test.d.ts" />
import ReadonlyArray from '../../containers/ReadonlyArray.mjs';
import { pipeLazy } from '../../functions.mjs';
import Enumerable from '../../ix/Enumerable.mjs';
import EnumerableObservable from '../../rx/EnumerableObservable.mjs';
import { bufferTests, catchErrorTests, concatTests, concatAllTests, concatMapTests, concatWithTests, decodeWithCharsetTests, distinctUntilChangedTests, endWithTests, everySatisfyTests, forEachTests, fromArrayTests, ignoreElementsTests, keepTests, mapTests, mapToTests, pairwiseTests, reduceTests, scanTests, scanAsyncTests, skipFirstTests, someSatisfyTests, startWithTests, takeFirstTests, takeLastTests, takeWhileTests, throwIfEmptyTests, zipTests, zipWithTests } from '../operators.mjs';
import { describe as createDescribe, test as createTest, expectArrayEquals, testModule } from '../testing.mjs';

const toEnumerableTests = createDescribe("toEnumerable", createTest("with an enumerable observable", pipeLazy([1, 2, 3, 4], ReadonlyArray.toEnumerableObservable(), EnumerableObservable.toEnumerable(), Enumerable.toReadonlyArray(), expectArrayEquals([1, 2, 3, 4]))));
testModule("EnumerableObservable", bufferTests(EnumerableObservable), catchErrorTests(EnumerableObservable), concatTests(EnumerableObservable), concatAllTests(EnumerableObservable), concatMapTests(EnumerableObservable), concatWithTests(EnumerableObservable), decodeWithCharsetTests(EnumerableObservable), distinctUntilChangedTests(EnumerableObservable), endWithTests(EnumerableObservable), everySatisfyTests(EnumerableObservable), forEachTests(EnumerableObservable), fromArrayTests(EnumerableObservable), ignoreElementsTests(EnumerableObservable), keepTests(EnumerableObservable), mapTests(EnumerableObservable), mapToTests(EnumerableObservable), pairwiseTests(EnumerableObservable), reduceTests(EnumerableObservable), scanTests(EnumerableObservable), scanAsyncTests(EnumerableObservable, EnumerableObservable), skipFirstTests(EnumerableObservable), someSatisfyTests(EnumerableObservable), startWithTests(EnumerableObservable), takeFirstTests(EnumerableObservable), takeLastTests(EnumerableObservable), takeWhileTests(EnumerableObservable), throwIfEmptyTests(EnumerableObservable), toEnumerableTests, zipTests(EnumerableObservable), zipWithTests(EnumerableObservable));
