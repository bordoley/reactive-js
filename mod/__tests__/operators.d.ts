import { Describe, TestAsync } from "./testing.js";
import { ContainerLike, Buffer, FromReadonlyArray, ToReadonlyArray, CatchError, Map, Concat, ConcatAll, DecodeWithCharset, Defer, DistinctUntilChanged, EverySatisfy, ForEach, FromIterable, Keep, Pairwise, Reduce, Repeat, TakeFirst, Scan, SkipFirst, SomeSatisfy, TakeLast, TakeWhile, ThrowIfEmpty, Zip } from "../containers.js";
import { ToEnumerable } from "../ix.js";
import { ObservableLike, Retry, ScanAsync, ToEnumerableObservable, ToObservable, ToRunnableObservable } from "../rx.js";
declare const bufferTests: <C extends ContainerLike>(m: Buffer<C, unknown> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const catchErrorTests: <C extends ContainerLike>(m: CatchError<C, never> & Map<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const concatTests: <C extends ContainerLike>(m: Concat<C> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const concatAllTests: <C extends ContainerLike>(m: ConcatAll<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const concatMapTests: <C extends ContainerLike>(m: ConcatAll<C, never> & FromReadonlyArray<C, unknown> & Map<C, never> & ToReadonlyArray<C, never>) => Describe;
declare const concatWithTests: <C extends ContainerLike>(m: Concat<C> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const decodeWithCharsetTests: <C extends ContainerLike>(m: DecodeWithCharset<C, unknown> & Defer<C, never> & FromReadonlyArray<C, unknown> & Map<C, never> & ToReadonlyArray<C, never>) => Describe;
declare const distinctUntilChangedTests: <C extends ContainerLike>(m: DistinctUntilChanged<C, unknown> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const endWithTests: <C extends ContainerLike>(m: Concat<C> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const everySatisfyTests: <C extends ContainerLike>(m: EverySatisfy<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const forEachTests: <C extends ContainerLike>(m: ForEach<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const fromReadonlyArrayTests: <C extends ContainerLike>(m: FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const genMapTests: <C extends ContainerLike>(m: ConcatAll<C, never> & FromReadonlyArray<C, unknown> & FromIterable<C, never> & Map<C, never> & ToReadonlyArray<C, never>) => Describe;
declare const ignoreElementsTests: <C extends ContainerLike>(m: Keep<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const keepTests: <C extends ContainerLike>(m: Keep<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const mapTests: <C extends ContainerLike>(m: Map<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const mapToTests: <C extends ContainerLike>(m: Map<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const pairwiseTests: <C extends ContainerLike>(m: Pairwise<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const reduceTests: <C extends ContainerLike>(m: Reduce<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const repeatTests: <C extends ContainerLike>(m: Repeat<C, never> & FromReadonlyArray<C, unknown> & TakeFirst<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const retryTests: <C extends ObservableLike<unknown>>(m: Concat<C> & Retry<C> & FromReadonlyArray<C, unknown> & Map<C, never> & TakeFirst<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const scanTests: <C extends ContainerLike>(m: Scan<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const scanAsyncTests: <C extends ContainerLike, CInner extends ObservableLike<unknown>>(m: ScanAsync<C, CInner> & FromReadonlyArray<C, {
    readonly start?: number | undefined;
    readonly count?: number | undefined;
    delay?: number | undefined;
}> & ToReadonlyArray<C, never>, mInner: FromReadonlyArray<CInner, {
    readonly start?: number | undefined;
    readonly count?: number | undefined;
    delay?: number | undefined;
}>) => Describe;
declare const skipFirstTests: <C extends ContainerLike>(m: SkipFirst<C, unknown> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const someSatisfyTests: <C extends ContainerLike>(m: SomeSatisfy<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const startWithTests: <C extends ContainerLike>(m: Concat<C> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const takeFirstTests: <C extends ContainerLike>(m: TakeFirst<C, unknown> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const takeLastTests: <C extends ContainerLike>(m: TakeLast<C, unknown> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const takeWhileTests: <C extends ContainerLike>(m: FromReadonlyArray<C, unknown> & TakeWhile<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const throwIfEmptyTests: <C extends ContainerLike>(m: FromReadonlyArray<C, unknown> & ThrowIfEmpty<C, never> & ToReadonlyArray<C, never>) => Describe;
declare const toEnumerableTests: <C extends ContainerLike>(m: FromReadonlyArray<C, unknown> & ToEnumerable<C, never>) => Describe;
declare const toEnumerableObservableTests: <C extends ContainerLike>(m: FromReadonlyArray<C, unknown> & ToEnumerableObservable<C, never>) => Describe;
declare const toObservableTests: <C extends ContainerLike>(m: FromReadonlyArray<C, unknown> & ToObservable<C, never>) => TestAsync;
declare const toRunnableObservableTests: <C extends ContainerLike>(m: FromReadonlyArray<C, unknown> & ToRunnableObservable<C, {
    readonly delay?: number | undefined;
    readonly delayStart?: boolean | undefined;
}>) => Describe;
declare const zipTests: <C extends ContainerLike>(m: Zip<C> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
declare const zipWithTests: <C extends ContainerLike>(m: Zip<C> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => Describe;
export { bufferTests, catchErrorTests, concatAllTests, concatMapTests, concatTests, concatWithTests, decodeWithCharsetTests, distinctUntilChangedTests, endWithTests, everySatisfyTests, forEachTests, fromReadonlyArrayTests, genMapTests, ignoreElementsTests, keepTests, mapTests, mapToTests, pairwiseTests, reduceTests, repeatTests, retryTests, scanAsyncTests, scanTests, skipFirstTests, someSatisfyTests, startWithTests, takeFirstTests, takeLastTests, takeWhileTests, throwIfEmptyTests, toEnumerableObservableTests, toEnumerableTests, toObservableTests, toRunnableObservableTests, zipTests, zipWithTests };
