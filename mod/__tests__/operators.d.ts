import { Buffer, Concat, ConcatAll, ConcatMap, ConcatWith, ContainerLike, Contains, DistinctUntilChanged, EndWith, EverySatisfy, FlatMapIterable, ForEach, FromOptional, FromReadonlyArray, IgnoreElements, Keep, Map, MapTo, Pairwise, Pick, Reduce, Repeat, Scan, SkipFirst, StartWith, TakeFirst, TakeLast, TakeWhile, Zip, ZipWith } from "../containers.js";
import { CatchError, DecodeWithCharset, EncodeUtf8, ObservableLike, Retry, ScanLast, ScanMany, ThrowIfEmpty, Throws, ToEnumerable, ToObservable, ToRunnable } from "../rx.js";
import type * as RX from "../rx.js";
export declare const bufferTests: <C extends ContainerLike>(m: Buffer<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const catchErrorTests: <C extends ContainerLike>(m: CatchError<C> & Throws<C, unknown> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const concatTests: <C extends ContainerLike>(m: Concat<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const concatAllTests: <C extends ContainerLike>(m: ConcatAll<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const concatMapTests: <C extends ContainerLike>(m: ConcatMap<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const concatWithTests: <C extends ContainerLike>(m: ConcatWith<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const decodeWithCharsetTests: <C extends ContainerLike>(m: DecodeWithCharset<C, unknown> & EncodeUtf8<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const distinctUntilChangedTests: <C extends ContainerLike>(m: DistinctUntilChanged<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const endWithTests: <C extends ContainerLike>(m: EndWith<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const everySatisfyTests: <C extends ContainerLike>(m: EverySatisfy<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const forEachTests: <C extends ContainerLike>(m: ForEach<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const fromReadonlyArrayTests: <C extends ContainerLike>(m: FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const flatMapIterableTests: <C extends ContainerLike>(m: FlatMapIterable<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const ignoreElementsTests: <C extends ContainerLike>(m: IgnoreElements<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const keepTests: <C extends ContainerLike>(m: Keep<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const mapTests: <C extends ContainerLike>(m: Map<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const mapToTests: <C extends ContainerLike>(m: MapTo<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const pairwiseTests: <C extends ContainerLike>(m: Pairwise<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const pickTests: <C extends ContainerLike>(m: Pick<C> & FromOptional<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const reduceTests: <C extends ContainerLike>(m: Reduce<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const repeatTests: <C extends ContainerLike>(m: Repeat<C> & FromReadonlyArray<C> & TakeFirst<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const retryTests: <C extends ContainerLike>(m: Concat<C> & Retry<C> & FromReadonlyArray<C> & Throws<C, unknown> & TakeFirst<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const scanTests: <C extends ContainerLike>(m: Scan<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const scanLastTests: <C extends ContainerLike, CInner extends ObservableLike<unknown>>(m: ScanLast<C, CInner> & RX.FromReadonlyArray<C> & ToRunnable<C, never>, mInner: RX.FromReadonlyArray<CInner>) => import("../__internal__/testing.js").Describe;
export declare const scanManyTests: <C extends ContainerLike, CInner extends ObservableLike<unknown>>(m: ScanMany<C, CInner> & RX.FromReadonlyArray<C> & ToRunnable<C, never>, mInner: RX.Generate<CInner> & TakeFirst<CInner>) => import("../__internal__/testing.js").Describe;
export declare const skipFirstTests: <C extends ContainerLike>(m: SkipFirst<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const containsTests: <C extends ContainerLike>(m: Contains<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const startWithTests: <C extends ContainerLike>(m: StartWith<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const takeFirstTests: <C extends ContainerLike>(m: TakeFirst<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const takeLastTests: <C extends ContainerLike>(m: TakeLast<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const takeWhileTests: <C extends ContainerLike>(m: FromReadonlyArray<C> & TakeWhile<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const throwIfEmptyTests: <C extends ContainerLike>(m: FromReadonlyArray<C> & ThrowIfEmpty<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const toEnumerableTests: <C extends ContainerLike>(m: FromReadonlyArray<C> & ToEnumerable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const toObservableTests: <C extends ContainerLike>(m: FromReadonlyArray<C> & ToObservable<C, never>) => import("../__internal__/testing.js").TestAsync;
export declare const toRunnableWithDelayTests: <C extends ContainerLike>(m: FromReadonlyArray<C> & ToRunnable<C, {
    readonly delay?: number | undefined;
    readonly delayStart?: boolean | undefined;
}>) => import("../__internal__/testing.js").Describe;
export declare const toRunnableTests: <C extends ContainerLike>(m: FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const zipTests: <C extends ContainerLike>(m: Zip<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
export declare const zipWithTests: <C extends ContainerLike>(m: ZipWith<C> & FromReadonlyArray<C> & ToRunnable<C, never>) => import("../__internal__/testing.js").Describe;
