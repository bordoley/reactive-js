import { Buffer, CatchError, Concat, ConcatAll, ConcatMap, ConcatWith, ContainerLike, Contains, DecodeWithCharset, DistinctUntilChanged, EncodeUtf8, EndWith, EverySatisfy, FlatMapIterable, ForEach, FromReadonlyArray, IgnoreElements, Keep, Map, MapTo, Pairwise, Reduce, Repeat, Scan, SkipFirst, StartWith, TakeFirst, TakeLast, TakeWhile, ThrowIfEmpty, Throws, ToReadonlyArray, Zip, ZipWith } from "../containers.js";
import { ObservableLike, Retry, ScanAsync, ToEnumerable, ToObservable, ToRunnable } from "../rx.js";
export declare const bufferTests: <C extends ContainerLike>(m: Buffer<C, unknown> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const catchErrorTests: <C extends ContainerLike>(m: CatchError<C, never> & Throws<C, unknown> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const concatTests: <C extends ContainerLike>(m: Concat<C> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const concatAllTests: <C extends ContainerLike>(m: ConcatAll<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const concatMapTests: <C extends ContainerLike>(m: ConcatMap<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const concatWithTests: <C extends ContainerLike>(m: ConcatWith<C> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const decodeWithCharsetTests: <C extends ContainerLike>(m: DecodeWithCharset<C, unknown> & EncodeUtf8<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const distinctUntilChangedTests: <C extends ContainerLike>(m: DistinctUntilChanged<C, unknown> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const endWithTests: <C extends ContainerLike>(m: EndWith<C> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const everySatisfyTests: <C extends ContainerLike>(m: EverySatisfy<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const forEachTests: <C extends ContainerLike>(m: ForEach<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const fromReadonlyArrayTests: <C extends ContainerLike>(m: FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const flatMapIterableTests: <C extends ContainerLike>(m: FlatMapIterable<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const ignoreElementsTests: <C extends ContainerLike>(m: IgnoreElements<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const keepTests: <C extends ContainerLike>(m: Keep<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const mapTests: <C extends ContainerLike>(m: Map<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const mapToTests: <C extends ContainerLike>(m: MapTo<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const pairwiseTests: <C extends ContainerLike>(m: Pairwise<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const reduceTests: <C extends ContainerLike>(m: Reduce<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const repeatTests: <C extends ContainerLike>(m: Repeat<C, never> & FromReadonlyArray<C, unknown> & TakeFirst<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const retryTests: <C extends ObservableLike<unknown>>(m: Concat<C> & Retry<C> & FromReadonlyArray<C, unknown> & Throws<C, unknown> & TakeFirst<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const scanTests: <C extends ContainerLike>(m: Scan<C, never> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const scanAsyncTests: <C extends ContainerLike, CInner extends ObservableLike<unknown>>(m: ScanAsync<C, CInner> & FromReadonlyArray<C, {
    readonly start?: number | undefined;
    readonly count?: number | undefined;
    delay?: number | undefined;
}> & ToReadonlyArray<C, never>, mInner: FromReadonlyArray<CInner, {
    readonly start?: number | undefined;
    readonly count?: number | undefined;
    delay?: number | undefined;
}>) => import("./testing.js").Describe;
export declare const skipFirstTests: <C extends ContainerLike>(m: SkipFirst<C, unknown> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const containsTests: <C extends ContainerLike>(m: Contains<C, unknown> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const startWithTests: <C extends ContainerLike>(m: StartWith<C> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const takeFirstTests: <C extends ContainerLike>(m: TakeFirst<C, unknown> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const takeLastTests: <C extends ContainerLike>(m: TakeLast<C, unknown> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const takeWhileTests: <C extends ContainerLike>(m: FromReadonlyArray<C, unknown> & TakeWhile<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const throwIfEmptyTests: <C extends ContainerLike>(m: FromReadonlyArray<C, unknown> & ThrowIfEmpty<C, never> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const toEnumerableTests: <C extends ContainerLike>(m: FromReadonlyArray<C, unknown> & ToEnumerable<C, never>) => import("./testing.js").Describe;
export declare const toObservableTests: <C extends ContainerLike>(m: FromReadonlyArray<C, unknown> & ToObservable<C, never>) => import("./testing.js").TestAsync;
export declare const toRunnableTests: <C extends ContainerLike>(m: FromReadonlyArray<C, unknown> & ToRunnable<C, {
    readonly delay?: number | undefined;
    readonly delayStart?: boolean | undefined;
}>) => import("./testing.js").Describe;
export declare const zipTests: <C extends ContainerLike>(m: Zip<C> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
export declare const zipWithTests: <C extends ContainerLike>(m: ZipWith<C> & FromReadonlyArray<C, unknown> & ToReadonlyArray<C, never>) => import("./testing.js").Describe;
