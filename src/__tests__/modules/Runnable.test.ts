import { Optional, none, pipeLazy } from "../../functions";
import { RunnableLike } from "../../rx";
import {
  buffer,
  catchError,
  concat,
  concatAll,
  decodeWithCharset,
  defer,
  distinctUntilChanged,
  everySatisfy,
  first,
  forEach,
  fromArray,
  keep,
  last,
  map,
  pairwise,
  reduce,
  repeat,
  scan,
  skipFirst,
  someSatisfy,
  takeFirst,
  takeLast,
  takeWhile,
  throwIfEmpty,
  toReadonlyArray,
} from "../../rx/Runnable";
import {
  bufferTests,
  catchErrorTests,
  concatAllTests,
  concatTests,
  decodeWithCharsetTests,
  distinctUntilChangedTests,
  everySatisfyTests,
  forEachTests,
  keepTests,
  mapTests,
  pairwiseTests,
  reduceTests,
  repeatTests,
  scanTests,
  skipFirstTests,
  someSatisfyTests,
  takeFirstTests,
  takeLastTests,
  takeWhileTests,
  throwIfEmptyTests,
} from "../operators";
import { describe, expectEquals, test, testModule } from "../testing";

testModule(
  "Runnable",
  bufferTests({
    fromArray,
    buffer,
    toReadonlyArray,
  }),
  catchErrorTests({
    fromArray,
    catchError,
    map,
    toReadonlyArray,
  }),
  concatTests<RunnableLike>({
    fromArray,
    concat,
    toReadonlyArray,
  }),
  concatAllTests({
    fromArray,
    concatAll,
    toReadonlyArray,
  }),
  decodeWithCharsetTests({
    fromArray,
    decodeWithCharset,
    defer,
    map,
    toReadonlyArray,
  }),
  distinctUntilChangedTests({
    fromArray,
    distinctUntilChanged,
    toReadonlyArray,
  }),
  everySatisfyTests({
    fromArray,
    everySatisfy,
    toReadonlyArray,
  }),
  forEachTests({
    fromArray,
    forEach,
    toReadonlyArray,
  }),
  keepTests({
    fromArray,
    keep,
    toReadonlyArray,
  }),
  mapTests({
    fromArray,
    map,
    toReadonlyArray,
  }),
  pairwiseTests({
    fromArray,
    pairwise,
    toReadonlyArray,
  }),
  reduceTests({
    fromArray,
    reduce,
    toReadonlyArray,
  }),
  repeatTests({
    fromArray,
    repeat,
    takeFirst,
    toReadonlyArray,
  }),
  scanTests({
    fromArray,
    scan,
    toReadonlyArray,
  }),
  skipFirstTests({
    fromArray,
    skipFirst,
    toReadonlyArray,
  }),
  someSatisfyTests({
    fromArray,
    someSatisfy,
    toReadonlyArray,
  }),
  takeFirstTests({
    fromArray,
    takeFirst,
    toReadonlyArray,
  }),
  takeLastTests({
    fromArray,
    takeLast,
    toReadonlyArray,
  }),
  takeWhileTests({
    fromArray,
    takeWhile,
    toReadonlyArray,
  }),
  throwIfEmptyTests({
    fromArray,
    throwIfEmpty,
    toReadonlyArray,
  }),
  describe(
    "first",
    test(
      "when the source has values",
      pipeLazy(
        [0, 1, 2],
        fromArray(),
        first(),
        expectEquals<Optional<number>>(0),
      ),
    ),
    test(
      "when the source is empty",
      pipeLazy([], fromArray(), first(), expectEquals<Optional<number>>(none)),
    ),
  ),
  describe(
    "last",
    test(
      "when the source has values",
      pipeLazy(
        [0, 1, 2],
        fromArray(),
        last(),
        expectEquals<Optional<number>>(2),
      ),
    ),
    test(
      "when the source is empty",
      pipeLazy([], fromArray(), last(), expectEquals<Optional<number>>(none)),
    ),
  ),
);
